name: Build Android ARM64 Nginx

on:
  workflow_dispatch: # 允许手动触发
  push:
    branches: [ main ]
    paths: [ 'src/**', 'auto/**', 'conf/**' ] # 当核心代码变更时触发

jobs:
  build-android-nginx:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # 设置超时时间

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential automake libtool unzip
        
    - name: Download Android NDK
      run: |
        # 下载指定版本的 NDK
        NDK_VERSION="25.2.9519653"
        NDK_ZIP="android-ndk-r${NDK_VERSION}-linux.zip"
        wget https://dl.google.com/android/repository/${NDK_ZIP}
        unzip -q ${NDK_ZIP} -d /usr/local/lib
        echo "NDK_ROOT=/usr/local/lib/android-ndk-r${NDK_VERSION}" >> $GITHUB_ENV
        echo "NDK_VERSION=${NDK_VERSION}" >> $GITHUB_ENV
        rm ${NDK_ZIP}

    - name: Configure build parameters
      id: config
      run: |
        # 设置架构参数
        echo "ARCH=arm64" >> $GITHUB_ENV
        echo "TRIPLE=aarch64-linux-android" >> $GITHUB_ENV
        echo "API_LEVEL=21" >> $GITHUB_ENV
        echo "CPU=armv8-a" >> $GITHUB_ENV
        
        # 设置工具链路径
        TOOLCHAIN="$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin"
        echo "TOOLCHAIN=$TOOLCHAIN" >> $GITHUB_ENV
        echo "CC=$TOOLCHAIN/${TRIPLE}${API_LEVEL}-clang" >> $GITHUB_ENV
        echo "CXX=$TOOLCHAIN/${TRIPLE}${API_LEVEL}-clang++" >> $GITHUB_ENV
        echo "AR=$TOOLCHAIN/llvm-ar" >> $GITHUB_ENV
        echo "RANLIB=$TOOLCHAIN/llvm-ranlib" >> $GITHUB_ENV
        
        # 设置编译标志
        echo "CFLAGS=-target ${TRIPLE} -march=$CPU -Os -fPIE -fPIC" >> $GITHUB_ENV
        echo "LDFLAGS=-target ${TRIPLE} -pie" >> $GITHUB_ENV

    - name: Configure Nginx
      run: |
        # 创建构建目录
        mkdir build-${{ env.ARCH }}
        cd build-${{ env.ARCH }}
        
        # 运行配置
        ../auto/configure \
          --prefix=/ \
          --sbin-path=nginx \
          --conf-path=conf/nginx.conf \
          --error-log-path=logs/error.log \
          --pid-path=logs/nginx.pid \
          --http-log-path=logs/access.log \
          --with-http_ssl_module \
          --with-http_gzip_static_module \
          --with-threads \
          --with-cc="${{ env.CC }}" \
          --with-cc-opt="${{ env.CFLAGS }}" \
          --with-ld-opt="${{ env.LDFLAGS }}" \
          --without-http_rewrite_module \
          --without-mail
        
        # 保存配置日志
        cp objs/autoconf.err ../config.log

    - name: Build Nginx
      run: |
        cd build-${{ env.ARCH }}
        make -j $(nproc) # 使用所有可用核心编译

    - name: Prepare artifacts
      run: |
        # 创建输出目录
        mkdir -p android-nginx-arm64/{conf,logs,html}
        
        # 复制二进制文件
        cp build-${{ env.ARCH }}/objs/nginx android-nginx-arm64/
        
        # 复制配置文件
        cp conf/nginx.conf android-nginx-arm64/conf/
        cp conf/mime.types android-nginx-arm64/conf/
        
        # 创建测试页面
        cat << EOF > android-nginx-arm64/html/index.html
        <!DOCTYPE html>
        <html>
        <head>
            <title>Nginx on Android</title>
        </head>
        <body>
            <h1>Nginx (ARM64) Running on Android!</h1>
            <p>Built with GitHub Actions at $(date)</p>
        </body>
        </html>
        EOF
        
        # 创建启动脚本
        cat << 'EOF' > android-nginx-arm64/start-nginx.sh
        #!/system/bin/sh
        
        # 设置环境
        SCRIPT_DIR="$(dirname "$0")"
        export PATH="$SCRIPT_DIR:$PATH"
        
        # 创建日志目录
        mkdir -p $SCRIPT_DIR/logs
        
        # 启动 Nginx
        echo "🚀 Starting Nginx (ARM64)..."
        nginx -p $SCRIPT_DIR -c $SCRIPT_DIR/conf/nginx.conf
        
        # 检查状态
        if [ $? -eq 0 ]; then
            echo "✅ Nginx started successfully (PID: $(cat $SCRIPT_DIR/logs/nginx.pid))"
            echo "🌐 Access: http://localhost:8080"
        else
            echo "❌ Nginx failed to start!"
            cat $SCRIPT_DIR/logs/error.log
        fi
        EOF
        
        chmod +x android-nginx-arm64/start-nginx.sh
        
        # 压缩输出
        tar czf android-nginx-arm64.tar.gz android-nginx-arm64

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-nginx-arm64
        path: |
          android-nginx-arm64.tar.gz
          config.log

    - name: Create release
      if: github.ref == 'refs/heads/main' # 仅在 main 分支创建发布
      uses: softprops/action-gh-release@v1
      with:
        files: android-nginx-arm64.tar.gz
        tag_name: android-arm64-$(date +%Y%m%d%H%M)
        name: "Android ARM64 Nginx Build"
        body: |
          ### Android ARM64 Nginx Build
          - Built on: $(date)
          - Commit: ${{ github.sha }}
          - Nginx Version: $(grep '^NGINX_VERSION=' auto/configure | cut -d= -f2)
          - NDK Version: ${{ env.NDK_VERSION }}
